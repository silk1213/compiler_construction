#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface generated by the BNF Converter.

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;


typedef std::string Id;


/********************   Forward Declarations    ********************/

class Program;
class Def;
class Arg;
class Stm;
class Exp;
class Type;
class PDefs;
class DFun;
class ADecl;
class SExp;
class SDecls;
class SInit;
class SReturn;
class SReturnVoid;
class SWhile;
class SBlock;
class SIfElse;
class ETrue;
class EFalse;
class EInt;
class EDouble;
class EString;
class EId;
class EApp;
class EPIncr;
class EPDecr;
class EIncr;
class EDecr;
class ETimes;
class EDiv;
class EPlus;
class EMinus;
class ELt;
class EGt;
class ELtEq;
class EGtEq;
class EEq;
class ENEq;
class EAnd;
class EOr;
class EAss;
class ETyped;
class Type_bool;
class Type_int;
class Type_double;
class Type_void;
class Type_string;
class ListDef;
class ListArg;
class ListStm;
class ListExp;
class ListId;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitProgram(Program *p) = 0;
  virtual void visitDef(Def *p) = 0;
  virtual void visitArg(Arg *p) = 0;
  virtual void visitStm(Stm *p) = 0;
  virtual void visitExp(Exp *p) = 0;
  virtual void visitType(Type *p) = 0;
  virtual void visitPDefs(PDefs *p) = 0;
  virtual void visitDFun(DFun *p) = 0;
  virtual void visitADecl(ADecl *p) = 0;
  virtual void visitSExp(SExp *p) = 0;
  virtual void visitSDecls(SDecls *p) = 0;
  virtual void visitSInit(SInit *p) = 0;
  virtual void visitSReturn(SReturn *p) = 0;
  virtual void visitSReturnVoid(SReturnVoid *p) = 0;
  virtual void visitSWhile(SWhile *p) = 0;
  virtual void visitSBlock(SBlock *p) = 0;
  virtual void visitSIfElse(SIfElse *p) = 0;
  virtual void visitETrue(ETrue *p) = 0;
  virtual void visitEFalse(EFalse *p) = 0;
  virtual void visitEInt(EInt *p) = 0;
  virtual void visitEDouble(EDouble *p) = 0;
  virtual void visitEString(EString *p) = 0;
  virtual void visitEId(EId *p) = 0;
  virtual void visitEApp(EApp *p) = 0;
  virtual void visitEPIncr(EPIncr *p) = 0;
  virtual void visitEPDecr(EPDecr *p) = 0;
  virtual void visitEIncr(EIncr *p) = 0;
  virtual void visitEDecr(EDecr *p) = 0;
  virtual void visitETimes(ETimes *p) = 0;
  virtual void visitEDiv(EDiv *p) = 0;
  virtual void visitEPlus(EPlus *p) = 0;
  virtual void visitEMinus(EMinus *p) = 0;
  virtual void visitELt(ELt *p) = 0;
  virtual void visitEGt(EGt *p) = 0;
  virtual void visitELtEq(ELtEq *p) = 0;
  virtual void visitEGtEq(EGtEq *p) = 0;
  virtual void visitEEq(EEq *p) = 0;
  virtual void visitENEq(ENEq *p) = 0;
  virtual void visitEAnd(EAnd *p) = 0;
  virtual void visitEOr(EOr *p) = 0;
  virtual void visitEAss(EAss *p) = 0;
  virtual void visitETyped(ETyped *p) = 0;
  virtual void visitType_bool(Type_bool *p) = 0;
  virtual void visitType_int(Type_int *p) = 0;
  virtual void visitType_double(Type_double *p) = 0;
  virtual void visitType_void(Type_void *p) = 0;
  virtual void visitType_string(Type_string *p) = 0;
  virtual void visitListDef(ListDef *p) = 0;
  virtual void visitListArg(ListArg *p) = 0;
  virtual void visitListStm(ListStm *p) = 0;
  virtual void visitListExp(ListExp *p) = 0;
  virtual void visitListId(ListId *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;
  virtual void visitId(Id x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Program : public Visitable
{
public:
  virtual Program *clone() const = 0;

};

class Def : public Visitable
{
public:
  virtual Id getId() = 0;
	virtual Type* getType() = 0;
	virtual ListArg* getArgs() = 0;
  virtual Def *clone() const = 0;

};

class Arg : public Visitable
{
public:
  virtual Type* getType() = 0;
  virtual Id getId() = 0;
  virtual Arg *clone() const = 0;

};

class Stm : public Visitable
{
public:
  virtual Stm *clone() const = 0;

};

class Exp : public Visitable
{
public:
  virtual Exp *clone() const = 0;
	std::string type;

};

class Type : public Visitable
{
public:
  virtual void printType() = 0;
  virtual Type *clone() const = 0;
  virtual std::string getType() = 0;

};



class PDefs : public Program
{
public:
  ListDef *listdef_;

  PDefs(const PDefs &);
  PDefs &operator=(const PDefs &);
  PDefs(ListDef *p1);
  ~PDefs();
  virtual void accept(Visitor *v);
  virtual PDefs *clone() const;
  void swap(PDefs &);
};

class DFun : public Def
{
public:
  Type *type_;
  Id id_;
  ListArg *listarg_;
  ListStm *liststm_;

	Id getId();
	Type* getType();
	ListArg* getArgs();
  DFun(const DFun &);
  DFun &operator=(const DFun &);
  DFun(Type *p1, Id p2, ListArg *p3, ListStm *p4);
  ~DFun();
  virtual void accept(Visitor *v);
  virtual DFun *clone() const;
  void swap(DFun &);
};

class ADecl : public Arg
{
public:
  Type *type_;
  Id id_;

  Type* getType();
  Id getId();
  ADecl(const ADecl &);
  ADecl &operator=(const ADecl &);
  ADecl(Type *p1, Id p2);
  ~ADecl();
  virtual void accept(Visitor *v);
  virtual ADecl *clone() const;
  void swap(ADecl &);
};

class SExp : public Stm
{
public:
  Exp *exp_;

  SExp(const SExp &);
  SExp &operator=(const SExp &);
  SExp(Exp *p1);
  ~SExp();
  virtual void accept(Visitor *v);
  virtual SExp *clone() const;
  void swap(SExp &);
};

class SDecls : public Stm
{
public:
  Type *type_;
  ListId *listid_;

  SDecls(const SDecls &);
  SDecls &operator=(const SDecls &);
  SDecls(Type *p1, ListId *p2);
  ~SDecls();
  virtual void accept(Visitor *v);
  virtual SDecls *clone() const;
  void swap(SDecls &);
};

class SInit : public Stm
{
public:
  Type *type_;
  Id id_;
  Exp *exp_;

  SInit(const SInit &);
  SInit &operator=(const SInit &);
  SInit(Type *p1, Id p2, Exp *p3);
  ~SInit();
  virtual void accept(Visitor *v);
  virtual SInit *clone() const;
  void swap(SInit &);
};

class SReturn : public Stm
{
public:
  Exp *exp_;

  SReturn(const SReturn &);
  SReturn &operator=(const SReturn &);
  SReturn(Exp *p1);
  ~SReturn();
  virtual void accept(Visitor *v);
  virtual SReturn *clone() const;
  void swap(SReturn &);
};

class SReturnVoid : public Stm
{
public:

  SReturnVoid(const SReturnVoid &);
  SReturnVoid &operator=(const SReturnVoid &);
  SReturnVoid();
  ~SReturnVoid();
  virtual void accept(Visitor *v);
  virtual SReturnVoid *clone() const;
  void swap(SReturnVoid &);
};

class SWhile : public Stm
{
public:
  Exp *exp_;
  Stm *stm_;

  SWhile(const SWhile &);
  SWhile &operator=(const SWhile &);
  SWhile(Exp *p1, Stm *p2);
  ~SWhile();
  virtual void accept(Visitor *v);
  virtual SWhile *clone() const;
  void swap(SWhile &);
};

class SBlock : public Stm
{
public:
  ListStm *liststm_;

  SBlock(const SBlock &);
  SBlock &operator=(const SBlock &);
  SBlock(ListStm *p1);
  ~SBlock();
  virtual void accept(Visitor *v);
  virtual SBlock *clone() const;
  void swap(SBlock &);
};

class SIfElse : public Stm
{
public:
  Exp *exp_;
  Stm *stm_1;
  Stm *stm_2;

  SIfElse(const SIfElse &);
  SIfElse &operator=(const SIfElse &);
  SIfElse(Exp *p1, Stm *p2, Stm *p3);
  ~SIfElse();
  virtual void accept(Visitor *v);
  virtual SIfElse *clone() const;
  void swap(SIfElse &);
};

class ETrue : public Exp
{
public:

  ETrue(const ETrue &);
  ETrue &operator=(const ETrue &);
  ETrue();
  ~ETrue();
  virtual void accept(Visitor *v);
  virtual ETrue *clone() const;
  void swap(ETrue &);
};

class EFalse : public Exp
{
public:

  EFalse(const EFalse &);
  EFalse &operator=(const EFalse &);
  EFalse();
  ~EFalse();
  virtual void accept(Visitor *v);
  virtual EFalse *clone() const;
  void swap(EFalse &);
};

class EInt : public Exp
{
public:
  Integer integer_;

  EInt(const EInt &);
  EInt &operator=(const EInt &);
  EInt(Integer p1);
  ~EInt();
  virtual void accept(Visitor *v);
  virtual EInt *clone() const;
  void swap(EInt &);
};

class EDouble : public Exp
{
public:
  Double double_;

  EDouble(const EDouble &);
  EDouble &operator=(const EDouble &);
  EDouble(Double p1);
  ~EDouble();
  virtual void accept(Visitor *v);
  virtual EDouble *clone() const;
  void swap(EDouble &);
};

class EString : public Exp
{
public:
  String string_;

  EString(const EString &);
  EString &operator=(const EString &);
  EString(String p1);
  ~EString();
  virtual void accept(Visitor *v);
  virtual EString *clone() const;
  void swap(EString &);
};

class EId : public Exp
{
public:
  Id id_;

  EId(const EId &);
  EId &operator=(const EId &);
  EId(Id p1);
  ~EId();
  virtual void accept(Visitor *v);
  virtual EId *clone() const;
  void swap(EId &);
};

class EApp : public Exp
{
public:
  Id id_;
  ListExp *listexp_;

  EApp(const EApp &);
  EApp &operator=(const EApp &);
  EApp(Id p1, ListExp *p2);
  ~EApp();
  virtual void accept(Visitor *v);
  virtual EApp *clone() const;
  void swap(EApp &);
};

class EPIncr : public Exp
{
public:
  Exp *exp_;

  EPIncr(const EPIncr &);
  EPIncr &operator=(const EPIncr &);
  EPIncr(Exp *p1);
  ~EPIncr();
  virtual void accept(Visitor *v);
  virtual EPIncr *clone() const;
  void swap(EPIncr &);
};

class EPDecr : public Exp
{
public:
  Exp *exp_;

  EPDecr(const EPDecr &);
  EPDecr &operator=(const EPDecr &);
  EPDecr(Exp *p1);
  ~EPDecr();
  virtual void accept(Visitor *v);
  virtual EPDecr *clone() const;
  void swap(EPDecr &);
};

class EIncr : public Exp
{
public:
  Exp *exp_;

  EIncr(const EIncr &);
  EIncr &operator=(const EIncr &);
  EIncr(Exp *p1);
  ~EIncr();
  virtual void accept(Visitor *v);
  virtual EIncr *clone() const;
  void swap(EIncr &);
};

class EDecr : public Exp
{
public:
  Exp *exp_;

  EDecr(const EDecr &);
  EDecr &operator=(const EDecr &);
  EDecr(Exp *p1);
  ~EDecr();
  virtual void accept(Visitor *v);
  virtual EDecr *clone() const;
  void swap(EDecr &);
};

class ETimes : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  ETimes(const ETimes &);
  ETimes &operator=(const ETimes &);
  ETimes(Exp *p1, Exp *p2);
  ~ETimes();
  virtual void accept(Visitor *v);
  virtual ETimes *clone() const;
  void swap(ETimes &);
};

class EDiv : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  EDiv(const EDiv &);
  EDiv &operator=(const EDiv &);
  EDiv(Exp *p1, Exp *p2);
  ~EDiv();
  virtual void accept(Visitor *v);
  virtual EDiv *clone() const;
  void swap(EDiv &);
};

class EPlus : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  EPlus(const EPlus &);
  EPlus &operator=(const EPlus &);
  EPlus(Exp *p1, Exp *p2);
  ~EPlus();
  virtual void accept(Visitor *v);
  virtual EPlus *clone() const;
  void swap(EPlus &);
};

class EMinus : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  EMinus(const EMinus &);
  EMinus &operator=(const EMinus &);
  EMinus(Exp *p1, Exp *p2);
  ~EMinus();
  virtual void accept(Visitor *v);
  virtual EMinus *clone() const;
  void swap(EMinus &);
};

class ELt : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  ELt(const ELt &);
  ELt &operator=(const ELt &);
  ELt(Exp *p1, Exp *p2);
  ~ELt();
  virtual void accept(Visitor *v);
  virtual ELt *clone() const;
  void swap(ELt &);
};

class EGt : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  EGt(const EGt &);
  EGt &operator=(const EGt &);
  EGt(Exp *p1, Exp *p2);
  ~EGt();
  virtual void accept(Visitor *v);
  virtual EGt *clone() const;
  void swap(EGt &);
};

class ELtEq : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  ELtEq(const ELtEq &);
  ELtEq &operator=(const ELtEq &);
  ELtEq(Exp *p1, Exp *p2);
  ~ELtEq();
  virtual void accept(Visitor *v);
  virtual ELtEq *clone() const;
  void swap(ELtEq &);
};

class EGtEq : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  EGtEq(const EGtEq &);
  EGtEq &operator=(const EGtEq &);
  EGtEq(Exp *p1, Exp *p2);
  ~EGtEq();
  virtual void accept(Visitor *v);
  virtual EGtEq *clone() const;
  void swap(EGtEq &);
};

class EEq : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  EEq(const EEq &);
  EEq &operator=(const EEq &);
  EEq(Exp *p1, Exp *p2);
  ~EEq();
  virtual void accept(Visitor *v);
  virtual EEq *clone() const;
  void swap(EEq &);
};

class ENEq : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  ENEq(const ENEq &);
  ENEq &operator=(const ENEq &);
  ENEq(Exp *p1, Exp *p2);
  ~ENEq();
  virtual void accept(Visitor *v);
  virtual ENEq *clone() const;
  void swap(ENEq &);
};

class EAnd : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  EAnd(const EAnd &);
  EAnd &operator=(const EAnd &);
  EAnd(Exp *p1, Exp *p2);
  ~EAnd();
  virtual void accept(Visitor *v);
  virtual EAnd *clone() const;
  void swap(EAnd &);
};

class EOr : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  EOr(const EOr &);
  EOr &operator=(const EOr &);
  EOr(Exp *p1, Exp *p2);
  ~EOr();
  virtual void accept(Visitor *v);
  virtual EOr *clone() const;
  void swap(EOr &);
};

class EAss : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  EAss(const EAss &);
  EAss &operator=(const EAss &);
  EAss(Exp *p1, Exp *p2);
  ~EAss();
  virtual void accept(Visitor *v);
  virtual EAss *clone() const;
  void swap(EAss &);
};

class ETyped : public Exp
{
public:
  Exp *exp_;
  Type *type_;

  ETyped(const ETyped &);
  ETyped &operator=(const ETyped &);
  ETyped(Exp *p1, Type *p2);
  ~ETyped();
  virtual void accept(Visitor *v);
  virtual ETyped *clone() const;
  void swap(ETyped &);
};

class Type_bool : public Type
{
public:
  void printType() ;
  Type_bool(const Type_bool &);
  Type_bool &operator=(const Type_bool &);
  Type_bool();
  ~Type_bool();
  virtual void accept(Visitor *v);
  virtual Type_bool *clone() const;
  void swap(Type_bool &);
  std::string getType();
};

class Type_int : public Type
{
public:
  void printType() ;
  Type_int(const Type_int &);
  Type_int &operator=(const Type_int &);
  Type_int();
  ~Type_int();
  virtual void accept(Visitor *v);
  virtual Type_int *clone() const;
  void swap(Type_int &);
  std::string getType();
};

class Type_double : public Type
{
public:
  void printType() ;
  Type_double(const Type_double &);
  Type_double &operator=(const Type_double &);
  Type_double();
  ~Type_double();
  virtual void accept(Visitor *v);
  virtual Type_double *clone() const;
  void swap(Type_double &);
  std::string getType();
};

class Type_void : public Type
{
public:
  void printType() ;
  Type_void(const Type_void &);
  Type_void &operator=(const Type_void &);
  Type_void();
  ~Type_void();
  virtual void accept(Visitor *v);
  virtual Type_void *clone() const;
  void swap(Type_void &);
  std::string getType();
};

class Type_string : public Type
{
public:
  void printType() ;
  Type_string(const Type_string &);
  Type_string &operator=(const Type_string &);
  Type_string();
  ~Type_string();
  virtual void accept(Visitor *v);
  virtual Type_string *clone() const;
  void swap(Type_string &);
  std::string getType();
};



class ListDef : public Visitable, public std::vector<Def*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListDef *clone() const;
};

class ListArg : public Visitable, public std::vector<Arg*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListArg *clone() const;
};

class ListStm : public Visitable, public std::vector<Stm*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListStm *clone() const;
};

class ListExp : public Visitable, public std::vector<Exp*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListExp *clone() const;
};

class ListId : public Visitable, public std::vector<Id>
{
public:
  virtual void accept(Visitor *v);
  virtual ListId *clone() const;
};



#endif
