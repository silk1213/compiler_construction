-- COMMENTS & PREPROZESSOR STUFF - ignored by parser
comment "//" ;
comment "/*" "*/" ;
comment "#" ;

-- PROGRAM
Prog . Program ::= [Definition] ;

-- DEFINITIONS
FunctionDefIn . Definition ::= "inline" Type Id ArgumentList Body ;
FunctionDef . Definition ::= Type Id ArgumentList Body ;
FuctionDeclInline . Definition ::= "inline" Type Id ArgumentList ";" ;
FunctionDecl . Definition ::= Type Id ArgumentList ";" ;
GlobVar . Definition ::= Decl ";" ;
GlobStruct . Definition ::= Struct ";" ;
GlobTypeDef . Definition ::= TypeDef ;
UsingNSDef . Definition ::= "using" "namespace" Id ";" ;
UsingDef . Definition ::= "using" QCon ";" ;
terminator Definition "" ;

-- ARGUMENTLISTS
ArgumentListDef . ArgumentList ::= "(" [Argument] ")" ;
separator Argument "," ;
terminator Argument "" ;
ArgumentConstDecl . Argument ::= "const" Type Exp ;
ArgumentDecl . Argument ::= Type Exp ;
ArgumentConsttype . Argument ::= "const" Type;
ArgumentType . Argument ::= Type ;
--ArgInitialization . ArgId ::= Id "=" Exp ;
--ArgName . ArgId ::= Id ;

-- BODY 
FuntionBody . Body ::= "{" [Stm] "}" ;
EmptyBody . Body ::= "{" ";" "}" ;

-- STATEMENTS
StmDecl . Stm ::= Decl ";" ;
StmReturn . Stm ::= "return" Exp ";" ;
StmExit . Stm ::= "exit" "(" Exp ")" ";" ;
StmWhile . Stm ::= "while" "(" Exp ")" Stm ;
StmDoWhile . Stm ::= "do" Stm "while" "(" Exp ")" ";" ;
StmFor . Stm ::= "for" "(" Decl ";" Exp ";" Exp ")" Stm ;
StmIfElse . Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
StmIf . Stm ::= "if" "(" Exp ")" Stm ;
StmBlock . Stm ::= "{" [Stm] "}" ;
StmEmptyBlock . Stm ::= "{" "}" ;
StmTypeDef . Stm ::= TypeDef ;
StmeStruct . Stm ::= Struct ";" ;
StmExpression . Stm ::= Exp ";" ;
terminator Stm "";

-- STRUCTS
StructDef . Struct ::= "struct" Id "{" [Decl] "}" ;

-- TYPEDEF
TypeDefForm . TypeDef ::= "typedef" Type Id ";" ;
--TypeDefForm2 . TypeDef ::= "typedef" Type ";" ;

-- DECLARATIONS
ConstMulDecl . Decl ::= "const" Type Var "," [Var] ;
ConstDecl . Decl ::= "const" Type Var ;
MulDeclaration . Decl ::= Type Var "," [Var] ;
Declaration . Decl ::= Type Var ;
VariableInitialization . Var ::= Id "=" Exp ;
VariableName . Var ::= Id ;
separator nonempty Var "," ;
terminator Var "" ;
separator Decl ";" ;
terminator Decl ";" ;
--Variable . Var ::= Exp ;

-- QUALIFIED CONSTANTS
QualCon . QCon ::= QCon "::" Name ;
QualConN . QCon ::= Name ;
--separator nonempty Name "::" ;
--terminator Name "" ;
IdName . Name ::= Id ;
TempInstName . Name ::= TempInst ;

-- EXPRESSIONS
EIdent . Exp16 ::= Id ;
ELiteral . Exp16 ::= Literal ;
EBracket . Exp16 ::= "(" Exp ")" ;
EIndex . Exp15 ::= Exp15 "[" Exp "]" ;
EQCon . Exp15 ::= QCon;
EFunCall . Exp15 ::= Exp15 "(" [Exp] ")" ;
EStrucProj . Exp14 ::= Exp15 "." Exp15 ; 
EStrucPro . Exp14 ::= Exp15 "->" Exp15 ;
EInC . Exp14 ::= Exp15 "++" ;
EDeC . Exp14 ::= Exp15 "--" ;
EDeRef . Exp14 ::= "*" Exp15 ;
EInCr . Exp13 ::= "++" Exp14 ;
EDeCr . Exp13 ::= "--" Exp14 ;
ENeg . Exp13 ::= "!" Exp14 ;
EMul . Exp12 ::= Exp12 "*" Exp13 ;
EDiv . Exp12 ::= Exp12 "/" Exp13 ;
ERem . Exp12 ::= Exp12 "%" Exp13 ;
EAdd . Exp11 ::= Exp11 "+" Exp12 ;
ESub . Exp11 ::= Exp11 "-" Exp12 ;
ELSh . Exp10 ::= Exp10 "<<" Exp11 ;
ERSh . Exp10 ::= Exp10 ">>" Exp11 ;
EGT . Exp9 ::= Exp9 ">" Exp10 ;
ELT . Exp9 ::= Exp9 "<" Exp10 ;
EGQ . Exp9 ::= Exp9 "=>" Exp10 ;
EGQ1 . Exp9 ::= Exp9 ">=" Exp10 ;
ELQ . Exp9 ::= Exp9 "<=" Exp10 ;
ELQ1 . Exp9 ::= Exp9 "=<" Exp10 ;
EQu . Exp8 ::= Exp8 "==" Exp9 ;
EIQ . Exp8 ::= Exp8 "!=" Exp9 ;
EAnd . Exp4 ::= Exp4 "&&" Exp5 ;
EOr . Exp3 ::= Exp3 "||" Exp4 ;
EIs . Exp2 ::= Exp2 "=" Exp3 ;
EIsP . Exp2 ::= Exp2 "+=" Exp3 ;
EIsM . Exp2 ::= Exp2 "-=" Exp3 ;
ECond . Exp2 ::= Exp2 "?" Exp3 ":" Exp3 ;
EEx . Exp1 ::= "throw" Exp2 ;
coercions Exp 16 ;
separator Exp "," ;
terminator Exp "" ;

-- TEMPLATE INSTANTIATIONS
TemplateInst . TempInst ::= Id "<" TypeList ">" ;
TypeListDef . TypeList ::= Type "," TypeList ;
TypeList1 . TypeList ::= Type ;
separator nonempty Type "," ;
terminator Type "" ;

-- TYPES
Pointer . Type ::= BType "*" ;
Reference . Type ::= BType "&" ;
BaseType . Type ::= BType ;
TQCon . BType ::= QCon ;
TInt . BType ::= "int" ;
TVoid . BType ::= "void" ;
TBool . BType ::= "bool" ;
TDouble . BType ::= "double" ;

-- LITERALS
LStringList . Literal ::= StringList ;
LInt . Literal ::= Integer ;
LDouble . Literal ::= Double ;
LChar . Literal ::= Char ;
LStringListDef . StringList ::= StringList String ;
LString . StringList ::= String ;
Identif . Id ::= Ident ;

-- TOKENS
--token Id (letter | (letter | digit | '_' )*) ;
