

module AbsCPP where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq,Ord,Show,Read)
data Program =
   Prog [Definition]
  deriving (Eq,Ord,Show,Read)

data Definition =
   FunctionDefIn Type Id ArgumentList Body
 | FunctionDef Type Id ArgumentList Body
 | Function Type Id ArgumentList
 | GlobVar Decl
 | GlobStruct Struct
 | GlobTypeDef TypeDef
 | UsingNSDef Id
 | UsingDef QCon
  deriving (Eq,Ord,Show,Read)

data ArgumentList =
   ArgumentListDef [Argument]
  deriving (Eq,Ord,Show,Read)

data Argument =
   ArgumentConstDecl Type Exp
 | ArgumentDecl Type Exp
 | ArgumentConsttype Type
 | ArgumentType Type
  deriving (Eq,Ord,Show,Read)

data Body =
   FuntionBody [Stm]
 | EmptyBody
  deriving (Eq,Ord,Show,Read)

data Stm =
   StmDecl Decl
 | StmReturn Exp
 | StmExit Exp
 | StmWhile Exp Stm
 | StmDoWhile Stm Exp
 | StmFor Decl Exp Exp Stm
 | StmIfElse Exp Stm Stm
 | StmIf Exp Stm
 | StmBlock [Stm]
 | StmEmptyBlock
 | StmTypeDef TypeDef
 | StmeStruct Struct
 | StmExpression Exp
  deriving (Eq,Ord,Show,Read)

data Struct =
   StructDef Id [Decl]
  deriving (Eq,Ord,Show,Read)

data TypeDef =
   TypeDefForm Type Id
 | TypeDefForm2 Type
  deriving (Eq,Ord,Show,Read)

data Decl =
   ConstDecl Type [Var]
 | Declaration Type [Var]
  deriving (Eq,Ord,Show,Read)

data Var =
   VariableInitialization Id Exp
 | VariableName Id
  deriving (Eq,Ord,Show,Read)

data QCon =
   QualCon QCon Name
 | QualConN Name
  deriving (Eq,Ord,Show,Read)

data Name =
   IdName Id
 | TempInstName TempInst
  deriving (Eq,Ord,Show,Read)

data Exp =
   EIdent Id
 | ELiteral Literal
 | EBracket Exp
 | EIndex Exp Exp
 | EQCon QCon
 | EFunCall Exp [Exp]
 | EStrucProj Exp Exp
 | EStrucPro Exp Exp
 | EInC Exp
 | EDeC Exp
 | EDeRef Exp
 | EInCr Exp
 | EDeCr Exp
 | ENeg Exp
 | EMul Exp Exp
 | EDiv Exp Exp
 | ERem Exp Exp
 | EAdd Exp Exp
 | ESub Exp Exp
 | ELSh Exp Exp
 | ERSh Exp Exp
 | EGT Exp Exp
 | ELT Exp Exp
 | EGQ Exp Exp
 | EGQ1 Exp Exp
 | ELQ Exp Exp
 | ELQ1 Exp Exp
 | EQu Exp Exp
 | EIQ Exp Exp
 | EAnd Exp Exp
 | EOr Exp Exp
 | EIs Exp Exp
 | EIsP Exp Exp
 | EIsM Exp Exp
 | ECond Exp Exp Exp
 | EEx Exp
  deriving (Eq,Ord,Show,Read)

data TempInst =
   TemplateInst Id TypeList
  deriving (Eq,Ord,Show,Read)

data TypeList =
   TypeListDef [Type]
  deriving (Eq,Ord,Show,Read)

data Type =
   Pointer BType
 | Reference BType
 | BaseType BType
  deriving (Eq,Ord,Show,Read)

data BType =
   TQCon QCon
 | TInt
 | TVoid
 | TBool
 | TDouble
  deriving (Eq,Ord,Show,Read)

data Literal =
   LStringList StringList
 | LInt Integer
 | LDouble Double
 | LChar Char
  deriving (Eq,Ord,Show,Read)

data StringList =
   LStringListDef StringList String
 | LString String
  deriving (Eq,Ord,Show,Read)

data Id =
   Identif Ident
  deriving (Eq,Ord,Show,Read)

