module SkelCPP where

-- Haskell module generated by the BNF converter

import AbsCPP
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Prog definitions  -> failure x


transDefinition :: Definition -> Result
transDefinition x = case x of
  FunctionDefIn type' id argumentlist body  -> failure x
  FunctionDef type' id argumentlist body  -> failure x
  Function type' id argumentlist  -> failure x
  GlobVar decl  -> failure x
  GlobStruct struct  -> failure x
  GlobTypeDef typedef  -> failure x
  UsingNSDef id  -> failure x
  UsingDef qcon  -> failure x


transArgumentList :: ArgumentList -> Result
transArgumentList x = case x of
  ArgumentListDef arguments  -> failure x


transArgument :: Argument -> Result
transArgument x = case x of
  ArgumentConstDecl type' exp  -> failure x
  ArgumentDecl type' exp  -> failure x
  ArgumentConsttype type'  -> failure x
  ArgumentType type'  -> failure x


transBody :: Body -> Result
transBody x = case x of
  FuntionBody stms  -> failure x
  EmptyBody  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  StmDecl decl  -> failure x
  StmReturn exp  -> failure x
  StmExit exp  -> failure x
  StmWhile exp stm  -> failure x
  StmDoWhile stm exp  -> failure x
  StmFor decl exp1 exp2 stm3  -> failure x
  StmIfElse exp stm1 stm2  -> failure x
  StmIf exp stm  -> failure x
  StmBlock stms  -> failure x
  StmEmptyBlock  -> failure x
  StmTypeDef typedef  -> failure x
  StmeStruct struct  -> failure x
  StmExpression exp  -> failure x


transStruct :: Struct -> Result
transStruct x = case x of
  StructDef id decls  -> failure x


transTypeDef :: TypeDef -> Result
transTypeDef x = case x of
  TypeDefForm type' id  -> failure x
  TypeDefForm2 type'  -> failure x


transDecl :: Decl -> Result
transDecl x = case x of
  ConstDecl type' vars  -> failure x
  Declaration type' vars  -> failure x


transVar :: Var -> Result
transVar x = case x of
  VariableInitialization id exp  -> failure x
  VariableName id  -> failure x


transQCon :: QCon -> Result
transQCon x = case x of
  QualCon qcon name  -> failure x
  QualConN name  -> failure x


transName :: Name -> Result
transName x = case x of
  IdName id  -> failure x
  TempInstName tempinst  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  EIdent id  -> failure x
  ELiteral literal  -> failure x
  EBracket exp  -> failure x
  EIndex exp1 exp2  -> failure x
  EQCon qcon  -> failure x
  EFunCall exp exps  -> failure x
  EStrucProj exp1 exp2  -> failure x
  EStrucPro exp1 exp2  -> failure x
  EInC exp  -> failure x
  EDeC exp  -> failure x
  EDeRef exp  -> failure x
  EInCr exp  -> failure x
  EDeCr exp  -> failure x
  ENeg exp  -> failure x
  EMul exp1 exp2  -> failure x
  EDiv exp1 exp2  -> failure x
  ERem exp1 exp2  -> failure x
  EAdd exp1 exp2  -> failure x
  ESub exp1 exp2  -> failure x
  ELSh exp1 exp2  -> failure x
  ERSh exp1 exp2  -> failure x
  EGT exp1 exp2  -> failure x
  ELT exp1 exp2  -> failure x
  EGQ exp1 exp2  -> failure x
  EGQ1 exp1 exp2  -> failure x
  ELQ exp1 exp2  -> failure x
  ELQ1 exp1 exp2  -> failure x
  EQu exp1 exp2  -> failure x
  EIQ exp1 exp2  -> failure x
  EAnd exp1 exp2  -> failure x
  EOr exp1 exp2  -> failure x
  EIs exp1 exp2  -> failure x
  EIsP exp1 exp2  -> failure x
  EIsM exp1 exp2  -> failure x
  ECond exp1 exp2 exp3  -> failure x
  EEx exp  -> failure x


transTempInst :: TempInst -> Result
transTempInst x = case x of
  TemplateInst id typelist  -> failure x


transTypeList :: TypeList -> Result
transTypeList x = case x of
  TypeListDef types  -> failure x


transType :: Type -> Result
transType x = case x of
  Pointer btype  -> failure x
  Reference btype  -> failure x
  BaseType btype  -> failure x


transBType :: BType -> Result
transBType x = case x of
  TQCon qcon  -> failure x
  TInt  -> failure x
  TVoid  -> failure x
  TBool  -> failure x
  TDouble  -> failure x


transLiteral :: Literal -> Result
transLiteral x = case x of
  LStringList stringlist  -> failure x
  LInt n  -> failure x
  LDouble d  -> failure x
  LChar c  -> failure x


transStringList :: StringList -> Result
transStringList x = case x of
  LStringListDef stringlist str  -> failure x
  LString str  -> failure x


transId :: Id -> Result
transId x = case x of
  Identif id  -> failure x



