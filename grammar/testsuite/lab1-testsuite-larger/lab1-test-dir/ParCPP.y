-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParCPP where
import AbsCPP
import LexCPP
import ErrM

}

%name pProgram Program
%name pDefinition Definition
%name pListDefinition ListDefinition
%name pArgumentList ArgumentList
%name pListArgument ListArgument
%name pArgument Argument
%name pBody Body
%name pStm Stm
%name pListStm ListStm
%name pStruct Struct
%name pTypeDef TypeDef
%name pDecl Decl
%name pVar Var
%name pListVar ListVar
%name pListDecl ListDecl
%name pQCon QCon
%name pName Name
%name pExp16 Exp16
%name pExp15 Exp15
%name pExp14 Exp14
%name pExp13 Exp13
%name pExp12 Exp12
%name pExp11 Exp11
%name pExp10 Exp10
%name pExp9 Exp9
%name pExp8 Exp8
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp1 Exp1
%name pExp Exp
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pListExp ListExp
%name pTempInst TempInst
%name pTypeList TypeList
%name pListType ListType
%name pType Type
%name pBType BType
%name pLiteral Literal
%name pStringList StringList
%name pId Id

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  '++' { PT _ (TS _ 10) }
  '+=' { PT _ (TS _ 11) }
  ',' { PT _ (TS _ 12) }
  '-' { PT _ (TS _ 13) }
  '--' { PT _ (TS _ 14) }
  '-=' { PT _ (TS _ 15) }
  '->' { PT _ (TS _ 16) }
  '.' { PT _ (TS _ 17) }
  '/' { PT _ (TS _ 18) }
  ':' { PT _ (TS _ 19) }
  '::' { PT _ (TS _ 20) }
  ';' { PT _ (TS _ 21) }
  '<' { PT _ (TS _ 22) }
  '<<' { PT _ (TS _ 23) }
  '<=' { PT _ (TS _ 24) }
  '=' { PT _ (TS _ 25) }
  '=<' { PT _ (TS _ 26) }
  '==' { PT _ (TS _ 27) }
  '=>' { PT _ (TS _ 28) }
  '>' { PT _ (TS _ 29) }
  '>=' { PT _ (TS _ 30) }
  '>>' { PT _ (TS _ 31) }
  '?' { PT _ (TS _ 32) }
  '[' { PT _ (TS _ 33) }
  ']' { PT _ (TS _ 34) }
  'bool' { PT _ (TS _ 35) }
  'const' { PT _ (TS _ 36) }
  'do' { PT _ (TS _ 37) }
  'double' { PT _ (TS _ 38) }
  'else' { PT _ (TS _ 39) }
  'exit' { PT _ (TS _ 40) }
  'for' { PT _ (TS _ 41) }
  'if' { PT _ (TS _ 42) }
  'inline' { PT _ (TS _ 43) }
  'int' { PT _ (TS _ 44) }
  'namespace' { PT _ (TS _ 45) }
  'return' { PT _ (TS _ 46) }
  'struct' { PT _ (TS _ 47) }
  'throw' { PT _ (TS _ 48) }
  'typedef' { PT _ (TS _ 49) }
  'using' { PT _ (TS _ 50) }
  'void' { PT _ (TS _ 51) }
  'while' { PT _ (TS _ 52) }
  '{' { PT _ (TS _ 53) }
  '||' { PT _ (TS _ 54) }
  '}' { PT _ (TS _ 55) }

L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_charac { PT _ (TC $$) }
L_quoted { PT _ (TL $$) }
L_ident  { PT _ (TV $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
Char    :: { Char }    : L_charac { (read ( $1)) :: Char }
String  :: { String }  : L_quoted {  $1 }
Ident   :: { Ident }   : L_ident  { Ident $1 }

Program :: { Program }
Program : ListDefinition { Prog (reverse $1) } 


Definition :: { Definition }
Definition : 'inline' Type Id ArgumentList Body { FunctionDefIn $2 $3 $4 $5 } 
  | Type Id ArgumentList Body { FunctionDef $1 $2 $3 $4 }
  | Type Id ArgumentList ';' { Function $1 $2 $3 }
  | Decl ';' { GlobVar $1 }
  | Struct { GlobStruct $1 }
  | TypeDef { GlobTypeDef $1 }
  | 'using' 'namespace' Id ';' { UsingNSDef $3 }
  | 'using' QCon ';' { UsingDef $2 }


ListDefinition :: { [Definition] }
ListDefinition : {- empty -} { [] } 
  | ListDefinition Definition { flip (:) $1 $2 }


ArgumentList :: { ArgumentList }
ArgumentList : '(' ListArgument ')' { ArgumentListDef $2 } 


ListArgument :: { [Argument] }
ListArgument : {- empty -} { [] } 
  | Argument { (:[]) $1 }
  | Argument ',' ListArgument { (:) $1 $3 }
  | {- empty -} { [] }
  | Argument ListArgument { (:) $1 $2 }


Argument :: { Argument }
Argument : 'const' Type Exp { ArgumentConstDecl $2 $3 } 
  | Type Exp { ArgumentDecl $1 $2 }
  | 'const' Type { ArgumentConsttype $2 }
  | Type { ArgumentType $1 }


Body :: { Body }
Body : '{' ListStm '}' { FuntionBody (reverse $2) } 
  | '{' ';' '}' { EmptyBody }


Stm :: { Stm }
Stm : Decl ';' { StmDecl $1 } 
  | 'return' Exp ';' { StmReturn $2 }
  | 'exit' '(' Exp ')' ';' { StmExit $3 }
  | 'while' '(' Exp ')' Stm { StmWhile $3 $5 }
  | 'do' Stm 'while' '(' Exp ')' ';' { StmDoWhile $2 $5 }
  | 'for' '(' Decl ';' Exp ';' Exp ')' Stm { StmFor $3 $5 $7 $9 }
  | 'if' '(' Exp ')' Stm 'else' Stm { StmIfElse $3 $5 $7 }
  | 'if' '(' Exp ')' Stm { StmIf $3 $5 }
  | '{' ListStm '}' { StmBlock (reverse $2) }
  | '{' '}' { StmEmptyBlock }
  | TypeDef { StmTypeDef $1 }
  | Struct { StmeStruct $1 }
  | Exp ';' { StmExpression $1 }


ListStm :: { [Stm] }
ListStm : {- empty -} { [] } 
  | ListStm Stm { flip (:) $1 $2 }


Struct :: { Struct }
Struct : 'struct' Id '{' ListDecl '}' { StructDef $2 $4 } 


TypeDef :: { TypeDef }
TypeDef : 'typedef' Type Id ';' { TypeDefForm $2 $3 } 
  | 'typedef' Type ';' { TypeDefForm2 $2 }


Decl :: { Decl }
Decl : 'const' Type ListVar { ConstDecl $2 $3 } 
  | Type ListVar { Declaration $1 $2 }


Var :: { Var }
Var : Id '=' Exp { VariableInitialization $1 $3 } 
  | Id { VariableName $1 }


ListVar :: { [Var] }
ListVar : Var { (:[]) $1 } 
  | Var ',' ListVar { (:) $1 $3 }
  | {- empty -} { [] }
  | Var ListVar { (:) $1 $2 }


ListDecl :: { [Decl] }
ListDecl : {- empty -} { [] } 
  | Decl { (:[]) $1 }
  | Decl ';' ListDecl { (:) $1 $3 }
  | {- empty -} { [] }
  | Decl ListDecl { (:) $1 $2 }


QCon :: { QCon }
QCon : QCon '::' Name { QualCon $1 $3 } 
  | Name { QualConN $1 }


Name :: { Name }
Name : Id { IdName $1 } 
  | TempInst { TempInstName $1 }


Exp16 :: { Exp }
Exp16 : Id { EIdent $1 } 
  | Literal { ELiteral $1 }
  | '(' Exp ')' { EBracket $2 }
  | '(' Exp ')' { $2 }


Exp15 :: { Exp }
Exp15 : Exp15 '[' Exp ']' { EIndex $1 $3 } 
  | QCon { EQCon $1 }
  | Exp15 '(' ListExp ')' { EFunCall $1 $3 }
  | Exp16 { $1 }


Exp14 :: { Exp }
Exp14 : Exp15 '.' Exp15 { EStrucProj $1 $3 } 
  | Exp15 '->' Exp15 { EStrucPro $1 $3 }
  | Exp15 '++' { EInC $1 }
  | Exp15 '--' { EDeC $1 }
  | '*' Exp15 { EDeRef $2 }
  | Exp15 { $1 }


Exp13 :: { Exp }
Exp13 : '++' Exp14 { EInCr $2 } 
  | '--' Exp14 { EDeCr $2 }
  | '!' Exp14 { ENeg $2 }
  | Exp14 { $1 }


Exp12 :: { Exp }
Exp12 : Exp12 '*' Exp13 { EMul $1 $3 } 
  | Exp12 '/' Exp13 { EDiv $1 $3 }
  | Exp12 '%' Exp13 { ERem $1 $3 }
  | Exp13 { $1 }


Exp11 :: { Exp }
Exp11 : Exp11 '+' Exp12 { EAdd $1 $3 } 
  | Exp11 '-' Exp12 { ESub $1 $3 }
  | Exp12 { $1 }


Exp10 :: { Exp }
Exp10 : Exp10 '<<' Exp11 { ELSh $1 $3 } 
  | Exp10 '>>' Exp11 { ERSh $1 $3 }
  | Exp11 { $1 }


Exp9 :: { Exp }
Exp9 : Exp9 '>' Exp10 { EGT $1 $3 } 
  | Exp9 '<' Exp10 { ELT $1 $3 }
  | Exp9 '=>' Exp10 { EGQ $1 $3 }
  | Exp9 '>=' Exp10 { EGQ1 $1 $3 }
  | Exp9 '<=' Exp10 { ELQ $1 $3 }
  | Exp9 '=<' Exp10 { ELQ1 $1 $3 }
  | Exp10 { $1 }


Exp8 :: { Exp }
Exp8 : Exp8 '==' Exp9 { EQu $1 $3 } 
  | Exp8 '!=' Exp9 { EIQ $1 $3 }
  | Exp9 { $1 }


Exp4 :: { Exp }
Exp4 : Exp4 '&&' Exp5 { EAnd $1 $3 } 
  | Exp5 { $1 }


Exp3 :: { Exp }
Exp3 : Exp3 '||' Exp4 { EOr $1 $3 } 
  | Exp4 { $1 }


Exp2 :: { Exp }
Exp2 : Exp2 '=' Exp3 { EIs $1 $3 } 
  | Exp2 '+=' Exp3 { EIsP $1 $3 }
  | Exp2 '-=' Exp3 { EIsM $1 $3 }
  | Exp2 '?' Exp3 ':' Exp3 { ECond $1 $3 $5 }
  | Exp3 { $1 }


Exp1 :: { Exp }
Exp1 : 'throw' Exp2 { EEx $2 } 
  | Exp2 { $1 }


Exp :: { Exp }
Exp : Exp1 { $1 } 


Exp5 :: { Exp }
Exp5 : Exp6 { $1 } 


Exp6 :: { Exp }
Exp6 : Exp7 { $1 } 


Exp7 :: { Exp }
Exp7 : Exp8 { $1 } 


ListExp :: { [Exp] }
ListExp : {- empty -} { [] } 
  | Exp { (:[]) $1 }
  | Exp ',' ListExp { (:) $1 $3 }
  | {- empty -} { [] }
  | Exp ListExp { (:) $1 $2 }


TempInst :: { TempInst }
TempInst : Id '<' TypeList '>' { TemplateInst $1 $3 } 


TypeList :: { TypeList }
TypeList : ListType { TypeListDef $1 } 


ListType :: { [Type] }
ListType : {- empty -} { [] } 
  | Type { (:[]) $1 }
  | Type ',' ListType { (:) $1 $3 }
  | {- empty -} { [] }
  | Type ListType { (:) $1 $2 }


Type :: { Type }
Type : BType '*' { Pointer $1 } 
  | BType '&' { Reference $1 }
  | BType { BaseType $1 }


BType :: { BType }
BType : QCon { TQCon $1 } 
  | 'int' { TInt }
  | 'void' { TVoid }
  | 'bool' { TBool }
  | 'double' { TDouble }


Literal :: { Literal }
Literal : StringList { LStringList $1 } 
  | Integer { LInt $1 }
  | Double { LDouble $1 }
  | Char { LChar $1 }


StringList :: { StringList }
StringList : StringList String { LStringListDef $1 $2 } 
  | String { LString $1 }


Id :: { Id }
Id : Ident { Identif $1 } 



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

