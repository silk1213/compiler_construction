{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintCPP where

-- pretty-printer generated by the BNF converter

import AbsCPP
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))



instance Print Program where
  prt i e = case e of
   Prog definitions -> prPrec i 0 (concatD [prt 0 definitions])


instance Print Definition where
  prt i e = case e of
   FunctionDefIn type' id argumentlist body -> prPrec i 0 (concatD [doc (showString "inline") , prt 0 type' , prt 0 id , prt 0 argumentlist , prt 0 body])
   FunctionDef type' id argumentlist body -> prPrec i 0 (concatD [prt 0 type' , prt 0 id , prt 0 argumentlist , prt 0 body])
   Function type' id argumentlist -> prPrec i 0 (concatD [prt 0 type' , prt 0 id , prt 0 argumentlist , doc (showString ";")])
   GlobVar decl -> prPrec i 0 (concatD [prt 0 decl , doc (showString ";")])
   GlobStruct struct -> prPrec i 0 (concatD [prt 0 struct , doc (showString ";")])
   GlobTypeDef typedef -> prPrec i 0 (concatD [prt 0 typedef])
   UsingNSDef id -> prPrec i 0 (concatD [doc (showString "using") , doc (showString "namespace") , prt 0 id , doc (showString ";")])
   UsingDef qcon -> prPrec i 0 (concatD [doc (showString "using") , prt 0 qcon , doc (showString ";")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print ArgumentList where
  prt i e = case e of
   ArgumentListDef arguments -> prPrec i 0 (concatD [doc (showString "(") , prt 0 arguments , doc (showString ")")])


instance Print Argument where
  prt i e = case e of
   ArgumentConstDecl type' exp -> prPrec i 0 (concatD [doc (showString "const") , prt 0 type' , prt 0 exp])
   ArgumentDecl type' exp -> prPrec i 0 (concatD [prt 0 type' , prt 0 exp])
   ArgumentConsttype type' -> prPrec i 0 (concatD [doc (showString "const") , prt 0 type'])
   ArgumentType type' -> prPrec i 0 (concatD [prt 0 type'])

  prtList es = case es of
   [] -> (concatD [])
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Body where
  prt i e = case e of
   FuntionBody stms -> prPrec i 0 (concatD [doc (showString "{") , prt 0 stms , doc (showString "}")])
   EmptyBody  -> prPrec i 0 (concatD [doc (showString "{") , doc (showString ";") , doc (showString "}")])


instance Print Stm where
  prt i e = case e of
   StmDecl decl -> prPrec i 0 (concatD [prt 0 decl , doc (showString ";")])
   StmReturn exp -> prPrec i 0 (concatD [doc (showString "return") , prt 0 exp , doc (showString ";")])
   StmExit exp -> prPrec i 0 (concatD [doc (showString "exit") , doc (showString "(") , prt 0 exp , doc (showString ")") , doc (showString ";")])
   StmWhile exp stm -> prPrec i 0 (concatD [doc (showString "while") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 stm])
   StmDoWhile stm exp -> prPrec i 0 (concatD [doc (showString "do") , prt 0 stm , doc (showString "while") , doc (showString "(") , prt 0 exp , doc (showString ")") , doc (showString ";")])
   StmFor decl exp0 exp stm -> prPrec i 0 (concatD [doc (showString "for") , doc (showString "(") , prt 0 decl , doc (showString ";") , prt 0 exp0 , doc (showString ";") , prt 0 exp , doc (showString ")") , prt 0 stm])
   StmIfElse exp stm0 stm -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 stm0 , doc (showString "else") , prt 0 stm])
   StmIf exp stm -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 stm])
   StmBlock stms -> prPrec i 0 (concatD [doc (showString "{") , prt 0 stms , doc (showString "}")])
   StmEmptyBlock  -> prPrec i 0 (concatD [doc (showString "{") , doc (showString "}")])
   StmTypeDef typedef -> prPrec i 0 (concatD [prt 0 typedef])
   StmeStruct struct -> prPrec i 0 (concatD [prt 0 struct , doc (showString ";")])
   StmExpression exp -> prPrec i 0 (concatD [prt 0 exp , doc (showString ";")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Struct where
  prt i e = case e of
   StructDef id decls -> prPrec i 0 (concatD [doc (showString "struct") , prt 0 id , doc (showString "{") , prt 0 decls , doc (showString "}")])


instance Print TypeDef where
  prt i e = case e of
   TypeDefForm type' id -> prPrec i 0 (concatD [doc (showString "typedef") , prt 0 type' , prt 0 id , doc (showString ";")])
   TypeDefForm2 type' -> prPrec i 0 (concatD [doc (showString "typedef") , prt 0 type' , doc (showString ";")])


instance Print Decl where
  prt i e = case e of
   ConstDecl type' vars -> prPrec i 0 (concatD [doc (showString "const") , prt 0 type' , prt 0 vars])
   Declaration type' vars -> prPrec i 0 (concatD [prt 0 type' , prt 0 vars])

  prtList es = case es of
   [] -> (concatD [])
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Var where
  prt i e = case e of
   VariableInitialization id exp -> prPrec i 0 (concatD [prt 0 id , doc (showString "=") , prt 0 exp])
   VariableName id -> prPrec i 0 (concatD [prt 0 id])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print QCon where
  prt i e = case e of
   QualCon qcon name -> prPrec i 0 (concatD [prt 0 qcon , doc (showString "::") , prt 0 name])
   QualConN name -> prPrec i 0 (concatD [prt 0 name])


instance Print Name where
  prt i e = case e of
   IdName id -> prPrec i 0 (concatD [prt 0 id])
   TempInstName tempinst -> prPrec i 0 (concatD [prt 0 tempinst])


instance Print Exp where
  prt i e = case e of
   EIdent id -> prPrec i 16 (concatD [prt 0 id])
   ELiteral literal -> prPrec i 16 (concatD [prt 0 literal])
   EBracket exp -> prPrec i 16 (concatD [doc (showString "(") , prt 0 exp , doc (showString ")")])
   EIndex exp0 exp -> prPrec i 15 (concatD [prt 15 exp0 , doc (showString "[") , prt 0 exp , doc (showString "]")])
   EQCon qcon -> prPrec i 15 (concatD [prt 0 qcon])
   EFunCall exp exps -> prPrec i 15 (concatD [prt 15 exp , doc (showString "(") , prt 0 exps , doc (showString ")")])
   EStrucProj exp0 exp -> prPrec i 14 (concatD [prt 15 exp0 , doc (showString ".") , prt 15 exp])
   EStrucPro exp0 exp -> prPrec i 14 (concatD [prt 15 exp0 , doc (showString "->") , prt 15 exp])
   EInC exp -> prPrec i 14 (concatD [prt 15 exp , doc (showString "++")])
   EDeC exp -> prPrec i 14 (concatD [prt 15 exp , doc (showString "--")])
   EDeRef exp -> prPrec i 14 (concatD [doc (showString "*") , prt 15 exp])
   EInCr exp -> prPrec i 13 (concatD [doc (showString "++") , prt 14 exp])
   EDeCr exp -> prPrec i 13 (concatD [doc (showString "--") , prt 14 exp])
   ENeg exp -> prPrec i 13 (concatD [doc (showString "!") , prt 14 exp])
   EMul exp0 exp -> prPrec i 12 (concatD [prt 12 exp0 , doc (showString "*") , prt 13 exp])
   EDiv exp0 exp -> prPrec i 12 (concatD [prt 12 exp0 , doc (showString "/") , prt 13 exp])
   ERem exp0 exp -> prPrec i 12 (concatD [prt 12 exp0 , doc (showString "%") , prt 13 exp])
   EAdd exp0 exp -> prPrec i 11 (concatD [prt 11 exp0 , doc (showString "+") , prt 12 exp])
   ESub exp0 exp -> prPrec i 11 (concatD [prt 11 exp0 , doc (showString "-") , prt 12 exp])
   ELSh exp0 exp -> prPrec i 10 (concatD [prt 10 exp0 , doc (showString "<<") , prt 11 exp])
   ERSh exp0 exp -> prPrec i 10 (concatD [prt 10 exp0 , doc (showString ">>") , prt 11 exp])
   EGT exp0 exp -> prPrec i 9 (concatD [prt 9 exp0 , doc (showString ">") , prt 10 exp])
   ELT exp0 exp -> prPrec i 9 (concatD [prt 9 exp0 , doc (showString "<") , prt 10 exp])
   EGQ exp0 exp -> prPrec i 9 (concatD [prt 9 exp0 , doc (showString "=>") , prt 10 exp])
   EGQ1 exp0 exp -> prPrec i 9 (concatD [prt 9 exp0 , doc (showString ">=") , prt 10 exp])
   ELQ exp0 exp -> prPrec i 9 (concatD [prt 9 exp0 , doc (showString "<=") , prt 10 exp])
   ELQ1 exp0 exp -> prPrec i 9 (concatD [prt 9 exp0 , doc (showString "=<") , prt 10 exp])
   EQu exp0 exp -> prPrec i 8 (concatD [prt 8 exp0 , doc (showString "==") , prt 9 exp])
   EIQ exp0 exp -> prPrec i 8 (concatD [prt 8 exp0 , doc (showString "!=") , prt 9 exp])
   EAnd exp0 exp -> prPrec i 4 (concatD [prt 4 exp0 , doc (showString "&&") , prt 5 exp])
   EOr exp0 exp -> prPrec i 3 (concatD [prt 3 exp0 , doc (showString "||") , prt 4 exp])
   EIs exp0 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString "=") , prt 3 exp])
   EIsP exp0 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString "+=") , prt 3 exp])
   EIsM exp0 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString "-=") , prt 3 exp])
   ECond exp0 exp1 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString "?") , prt 3 exp1 , doc (showString ":") , prt 3 exp])
   EEx exp -> prPrec i 1 (concatD [doc (showString "throw") , prt 2 exp])

  prtList es = case es of
   [] -> (concatD [])
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print TempInst where
  prt i e = case e of
   TemplateInst id typelist -> prPrec i 0 (concatD [prt 0 id , doc (showString "<") , prt 0 typelist , doc (showString ">")])


instance Print TypeList where
  prt i e = case e of
   TypeListDef types -> prPrec i 0 (concatD [prt 0 types])


instance Print Type where
  prt i e = case e of
   Pointer btype -> prPrec i 0 (concatD [prt 0 btype , doc (showString "*")])
   Reference btype -> prPrec i 0 (concatD [prt 0 btype , doc (showString "&")])
   BaseType btype -> prPrec i 0 (concatD [prt 0 btype])

  prtList es = case es of
   [] -> (concatD [])
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print BType where
  prt i e = case e of
   TQCon qcon -> prPrec i 0 (concatD [prt 0 qcon])
   TInt  -> prPrec i 0 (concatD [doc (showString "int")])
   TVoid  -> prPrec i 0 (concatD [doc (showString "void")])
   TBool  -> prPrec i 0 (concatD [doc (showString "bool")])
   TDouble  -> prPrec i 0 (concatD [doc (showString "double")])


instance Print Literal where
  prt i e = case e of
   LStringList stringlist -> prPrec i 0 (concatD [prt 0 stringlist])
   LInt n -> prPrec i 0 (concatD [prt 0 n])
   LDouble d -> prPrec i 0 (concatD [prt 0 d])
   LChar c -> prPrec i 0 (concatD [prt 0 c])


instance Print StringList where
  prt i e = case e of
   LStringListDef stringlist str -> prPrec i 0 (concatD [prt 0 stringlist , prt 0 str])
   LString str -> prPrec i 0 (concatD [prt 0 str])


instance Print Id where
  prt i e = case e of
   Identif id -> prPrec i 0 (concatD [prt 0 id])



