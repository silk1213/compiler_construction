//C++ Abstract Syntax Implementation generated by the BNF Converter.
#include <algorithm>
#include <string>
#include <iostream>
#include <vector>
#include "Absyn.H"

/********************   Func    ********************/
Func::Func(Type *p1, Id p2, ListArg *p3, ListStm *p4)
{
  type_ = p1;
  id_ = p2;
  listarg_ = p3;
  liststm_ = p4;

}

Func::Func(const Func & other)
{
  type_ = other.type_->clone();
  id_ = other.id_;
  listarg_ = other.listarg_->clone();
  liststm_ = other.liststm_->clone();

}

Func &Func::operator=(const Func & other)
{
  Func tmp(other);
  swap(tmp);
  return *this;
}

void Func::swap(Func & other)
{
  std::swap(type_, other.type_);
  std::swap(id_, other.id_);
  std::swap(listarg_, other.listarg_);
  std::swap(liststm_, other.liststm_);

}

Func::~Func()
{
  delete(type_);
  delete(listarg_);
  delete(liststm_);

}

void Func::accept(Visitor *v)
{
  v->visitFunc(this);
}

Func *Func::clone() const
{
  return new Func(*this);
}



/********************   SDecl    ********************/
SDecl::SDecl(Type *p1, Id p2)
{
  type_ = p1;
  id_ = p2;

}

SDecl::SDecl(const SDecl & other)
{
  type_ = other.type_->clone();
  id_ = other.id_;

}

SDecl &SDecl::operator=(const SDecl & other)
{
  SDecl tmp(other);
  swap(tmp);
  return *this;
}

void SDecl::swap(SDecl & other)
{
  std::swap(type_, other.type_);
  std::swap(id_, other.id_);

}

SDecl::~SDecl()
{
  delete(type_);

}

void SDecl::accept(Visitor *v)
{
  v->visitSDecl(this);
}

SDecl *SDecl::clone() const
{
  return new SDecl(*this);
}



/********************   SDecls    ********************/
SDecls::SDecls(Type *p1, Id p2, ListId *p3)
{
  type_ = p1;
  id_ = p2;
  listid_ = p3;

}

SDecls::SDecls(const SDecls & other)
{
  type_ = other.type_->clone();
  id_ = other.id_;
  listid_ = other.listid_->clone();

}

SDecls &SDecls::operator=(const SDecls & other)
{
  SDecls tmp(other);
  swap(tmp);
  return *this;
}

void SDecls::swap(SDecls & other)
{
  std::swap(type_, other.type_);
  std::swap(id_, other.id_);
  std::swap(listid_, other.listid_);

}

SDecls::~SDecls()
{
  delete(type_);
  delete(listid_);

}

void SDecls::accept(Visitor *v)
{
  v->visitSDecls(this);
}

SDecls *SDecls::clone() const
{
  return new SDecls(*this);
}



/********************   SInit    ********************/
SInit::SInit(Type *p1, Id p2, Exp *p3)
{
  type_ = p1;
  id_ = p2;
  exp_ = p3;

}

SInit::SInit(const SInit & other)
{
  type_ = other.type_->clone();
  id_ = other.id_;
  exp_ = other.exp_->clone();

}

SInit &SInit::operator=(const SInit & other)
{
  SInit tmp(other);
  swap(tmp);
  return *this;
}

void SInit::swap(SInit & other)
{
  std::swap(type_, other.type_);
  std::swap(id_, other.id_);
  std::swap(exp_, other.exp_);

}

SInit::~SInit()
{
  delete(type_);
  delete(exp_);

}

void SInit::accept(Visitor *v)
{
  v->visitSInit(this);
}

SInit *SInit::clone() const
{
  return new SInit(*this);
}



/********************   SReturn    ********************/
SReturn::SReturn(Exp *p1)
{
  exp_ = p1;

}

SReturn::SReturn(const SReturn & other)
{
  exp_ = other.exp_->clone();

}

SReturn &SReturn::operator=(const SReturn & other)
{
  SReturn tmp(other);
  swap(tmp);
  return *this;
}

void SReturn::swap(SReturn & other)
{
  std::swap(exp_, other.exp_);

}

SReturn::~SReturn()
{
  delete(exp_);

}

void SReturn::accept(Visitor *v)
{
  v->visitSReturn(this);
}

SReturn *SReturn::clone() const
{
  return new SReturn(*this);
}



/********************   SWhile    ********************/
SWhile::SWhile(Exp *p1, Stm *p2)
{
  exp_ = p1;
  stm_ = p2;

}

SWhile::SWhile(const SWhile & other)
{
  exp_ = other.exp_->clone();
  stm_ = other.stm_->clone();

}

SWhile &SWhile::operator=(const SWhile & other)
{
  SWhile tmp(other);
  swap(tmp);
  return *this;
}

void SWhile::swap(SWhile & other)
{
  std::swap(exp_, other.exp_);
  std::swap(stm_, other.stm_);

}

SWhile::~SWhile()
{
  delete(exp_);
  delete(stm_);

}

void SWhile::accept(Visitor *v)
{
  v->visitSWhile(this);
}

SWhile *SWhile::clone() const
{
  return new SWhile(*this);
}



/********************   SDo    ********************/
SDo::SDo(Stm *p1, Exp *p2)
{
  stm_ = p1;
  exp_ = p2;

}

SDo::SDo(const SDo & other)
{
  stm_ = other.stm_->clone();
  exp_ = other.exp_->clone();

}

SDo &SDo::operator=(const SDo & other)
{
  SDo tmp(other);
  swap(tmp);
  return *this;
}

void SDo::swap(SDo & other)
{
  std::swap(stm_, other.stm_);
  std::swap(exp_, other.exp_);

}

SDo::~SDo()
{
  delete(stm_);
  delete(exp_);

}

void SDo::accept(Visitor *v)
{
  v->visitSDo(this);
}

SDo *SDo::clone() const
{
  return new SDo(*this);
}



/********************   SFor    ********************/
SFor::SFor(Type *p1, Id p2, Exp *p3, Exp *p4, Stm *p5, Stm *p6)
{
  type_ = p1;
  id_ = p2;
  exp_1 = p3;
  exp_2 = p4;
  stm_1 = p5;
  stm_2 = p6;

}

SFor::SFor(const SFor & other)
{
  type_ = other.type_->clone();
  id_ = other.id_;
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();
  stm_1 = other.stm_1->clone();
  stm_2 = other.stm_2->clone();

}

SFor &SFor::operator=(const SFor & other)
{
  SFor tmp(other);
  swap(tmp);
  return *this;
}

void SFor::swap(SFor & other)
{
  std::swap(type_, other.type_);
  std::swap(id_, other.id_);
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);
  std::swap(stm_1, other.stm_1);
  std::swap(stm_2, other.stm_2);

}

SFor::~SFor()
{
  delete(type_);
  delete(exp_1);
  delete(exp_2);
  delete(stm_1);
  delete(stm_2);

}

void SFor::accept(Visitor *v)
{
  v->visitSFor(this);
}

SFor *SFor::clone() const
{
  return new SFor(*this);
}



/********************   SIf    ********************/
SIf::SIf(Exp *p1, Stm *p2)
{
  exp_ = p1;
  stm_ = p2;

}

SIf::SIf(const SIf & other)
{
  exp_ = other.exp_->clone();
  stm_ = other.stm_->clone();

}

SIf &SIf::operator=(const SIf & other)
{
  SIf tmp(other);
  swap(tmp);
  return *this;
}

void SIf::swap(SIf & other)
{
  std::swap(exp_, other.exp_);
  std::swap(stm_, other.stm_);

}

SIf::~SIf()
{
  delete(exp_);
  delete(stm_);

}

void SIf::accept(Visitor *v)
{
  v->visitSIf(this);
}

SIf *SIf::clone() const
{
  return new SIf(*this);
}



/********************   SIfElse    ********************/
SIfElse::SIfElse(Exp *p1, Stm *p2, Stm *p3)
{
  exp_ = p1;
  stm_1 = p2;
  stm_2 = p3;

}

SIfElse::SIfElse(const SIfElse & other)
{
  exp_ = other.exp_->clone();
  stm_1 = other.stm_1->clone();
  stm_2 = other.stm_2->clone();

}

SIfElse &SIfElse::operator=(const SIfElse & other)
{
  SIfElse tmp(other);
  swap(tmp);
  return *this;
}

void SIfElse::swap(SIfElse & other)
{
  std::swap(exp_, other.exp_);
  std::swap(stm_1, other.stm_1);
  std::swap(stm_2, other.stm_2);

}

SIfElse::~SIfElse()
{
  delete(exp_);
  delete(stm_1);
  delete(stm_2);

}

void SIfElse::accept(Visitor *v)
{
  v->visitSIfElse(this);
}

SIfElse *SIfElse::clone() const
{
  return new SIfElse(*this);
}



/********************   SBlock    ********************/
SBlock::SBlock(ListStm *p1)
{
  liststm_ = p1;

}

SBlock::SBlock(const SBlock & other)
{
  liststm_ = other.liststm_->clone();

}

SBlock &SBlock::operator=(const SBlock & other)
{
  SBlock tmp(other);
  swap(tmp);
  return *this;
}

void SBlock::swap(SBlock & other)
{
  std::swap(liststm_, other.liststm_);

}

SBlock::~SBlock()
{
  delete(liststm_);

}

void SBlock::accept(Visitor *v)
{
  v->visitSBlock(this);
}

SBlock *SBlock::clone() const
{
  return new SBlock(*this);
}



/********************   STypedef    ********************/
STypedef::STypedef(Type *p1, Type *p2, Id p3)
{
  type_1 = p1;
  type_2 = p2;
  id_ = p3;

}

STypedef::STypedef(const STypedef & other)
{
  type_1 = other.type_1->clone();
  type_2 = other.type_2->clone();
  id_ = other.id_;

}

STypedef &STypedef::operator=(const STypedef & other)
{
  STypedef tmp(other);
  swap(tmp);
  return *this;
}

void STypedef::swap(STypedef & other)
{
  std::swap(type_1, other.type_1);
  std::swap(type_2, other.type_2);
  std::swap(id_, other.id_);

}

STypedef::~STypedef()
{
  delete(type_1);
  delete(type_2);

}

void STypedef::accept(Visitor *v)
{
  v->visitSTypedef(this);
}

STypedef *STypedef::clone() const
{
  return new STypedef(*this);
}



/********************   SStruct    ********************/
SStruct::SStruct(Id p1, ListStm *p2)
{
  id_ = p1;
  liststm_ = p2;

}

SStruct::SStruct(const SStruct & other)
{
  id_ = other.id_;
  liststm_ = other.liststm_->clone();

}

SStruct &SStruct::operator=(const SStruct & other)
{
  SStruct tmp(other);
  swap(tmp);
  return *this;
}

void SStruct::swap(SStruct & other)
{
  std::swap(id_, other.id_);
  std::swap(liststm_, other.liststm_);

}

SStruct::~SStruct()
{
  delete(liststm_);

}

void SStruct::accept(Visitor *v)
{
  v->visitSStruct(this);
}

SStruct *SStruct::clone() const
{
  return new SStruct(*this);
}



/********************   TemplateInstantiations    ********************/
TemplateInstantiations::TemplateInstantiations(ListType *p1)
{
  listtype_ = p1;

}

TemplateInstantiations::TemplateInstantiations(const TemplateInstantiations & other)
{
  listtype_ = other.listtype_->clone();

}

TemplateInstantiations &TemplateInstantiations::operator=(const TemplateInstantiations & other)
{
  TemplateInstantiations tmp(other);
  swap(tmp);
  return *this;
}

void TemplateInstantiations::swap(TemplateInstantiations & other)
{
  std::swap(listtype_, other.listtype_);

}

TemplateInstantiations::~TemplateInstantiations()
{
  delete(listtype_);

}

void TemplateInstantiations::accept(Visitor *v)
{
  v->visitTemplateInstantiations(this);
}

TemplateInstantiations *TemplateInstantiations::clone() const
{
  return new TemplateInstantiations(*this);
}



/********************   QualifiedConstants    ********************/
QualifiedConstants::QualifiedConstants(Id p1, ListId *p2)
{
  id_ = p1;
  listid_ = p2;

}

QualifiedConstants::QualifiedConstants(const QualifiedConstants & other)
{
  id_ = other.id_;
  listid_ = other.listid_->clone();

}

QualifiedConstants &QualifiedConstants::operator=(const QualifiedConstants & other)
{
  QualifiedConstants tmp(other);
  swap(tmp);
  return *this;
}

void QualifiedConstants::swap(QualifiedConstants & other)
{
  std::swap(id_, other.id_);
  std::swap(listid_, other.listid_);

}

QualifiedConstants::~QualifiedConstants()
{
  delete(listid_);

}

void QualifiedConstants::accept(Visitor *v)
{
  v->visitQualifiedConstants(this);
}

QualifiedConstants *QualifiedConstants::clone() const
{
  return new QualifiedConstants(*this);
}



/********************   StatementDefinition    ********************/
StatementDefinition::StatementDefinition(Exp *p1)
{
  exp_ = p1;

}

StatementDefinition::StatementDefinition(const StatementDefinition & other)
{
  exp_ = other.exp_->clone();

}

StatementDefinition &StatementDefinition::operator=(const StatementDefinition & other)
{
  StatementDefinition tmp(other);
  swap(tmp);
  return *this;
}

void StatementDefinition::swap(StatementDefinition & other)
{
  std::swap(exp_, other.exp_);

}

StatementDefinition::~StatementDefinition()
{
  delete(exp_);

}

void StatementDefinition::accept(Visitor *v)
{
  v->visitStatementDefinition(this);
}

StatementDefinition *StatementDefinition::clone() const
{
  return new StatementDefinition(*this);
}



/********************   ArgumentDefinition    ********************/
ArgumentDefinition::ArgumentDefinition(Exp *p1)
{
  exp_ = p1;

}

ArgumentDefinition::ArgumentDefinition(const ArgumentDefinition & other)
{
  exp_ = other.exp_->clone();

}

ArgumentDefinition &ArgumentDefinition::operator=(const ArgumentDefinition & other)
{
  ArgumentDefinition tmp(other);
  swap(tmp);
  return *this;
}

void ArgumentDefinition::swap(ArgumentDefinition & other)
{
  std::swap(exp_, other.exp_);

}

ArgumentDefinition::~ArgumentDefinition()
{
  delete(exp_);

}

void ArgumentDefinition::accept(Visitor *v)
{
  v->visitArgumentDefinition(this);
}

ArgumentDefinition *ArgumentDefinition::clone() const
{
  return new ArgumentDefinition(*this);
}



/********************   TInt    ********************/
TInt::TInt()
{

}

TInt::TInt(const TInt & other)
{

}

TInt &TInt::operator=(const TInt & other)
{
  TInt tmp(other);
  swap(tmp);
  return *this;
}

void TInt::swap(TInt & other)
{

}

TInt::~TInt()
{

}

void TInt::accept(Visitor *v)
{
  v->visitTInt(this);
}

TInt *TInt::clone() const
{
  return new TInt(*this);
}



/********************   TBool    ********************/
TBool::TBool()
{

}

TBool::TBool(const TBool & other)
{

}

TBool &TBool::operator=(const TBool & other)
{
  TBool tmp(other);
  swap(tmp);
  return *this;
}

void TBool::swap(TBool & other)
{

}

TBool::~TBool()
{

}

void TBool::accept(Visitor *v)
{
  v->visitTBool(this);
}

TBool *TBool::clone() const
{
  return new TBool(*this);
}



/********************   TDouble    ********************/
TDouble::TDouble()
{

}

TDouble::TDouble(const TDouble & other)
{

}

TDouble &TDouble::operator=(const TDouble & other)
{
  TDouble tmp(other);
  swap(tmp);
  return *this;
}

void TDouble::swap(TDouble & other)
{

}

TDouble::~TDouble()
{

}

void TDouble::accept(Visitor *v)
{
  v->visitTDouble(this);
}

TDouble *TDouble::clone() const
{
  return new TDouble(*this);
}



/********************   TVoid    ********************/
TVoid::TVoid()
{

}

TVoid::TVoid(const TVoid & other)
{

}

TVoid &TVoid::operator=(const TVoid & other)
{
  TVoid tmp(other);
  swap(tmp);
  return *this;
}

void TVoid::swap(TVoid & other)
{

}

TVoid::~TVoid()
{

}

void TVoid::accept(Visitor *v)
{
  v->visitTVoid(this);
}

TVoid *TVoid::clone() const
{
  return new TVoid(*this);
}



/********************   TString    ********************/
TString::TString()
{

}

TString::TString(const TString & other)
{

}

TString &TString::operator=(const TString & other)
{
  TString tmp(other);
  swap(tmp);
  return *this;
}

void TString::swap(TString & other)
{

}

TString::~TString()
{

}

void TString::accept(Visitor *v)
{
  v->visitTString(this);
}

TString *TString::clone() const
{
  return new TString(*this);
}



/********************   LString    ********************/
LString::LString()
{

}

LString::LString(const LString & other)
{

}

LString &LString::operator=(const LString & other)
{
  LString tmp(other);
  swap(tmp);
  return *this;
}

void LString::swap(LString & other)
{

}

LString::~LString()
{

}

void LString::accept(Visitor *v)
{
  v->visitLString(this);
}

LString *LString::clone() const
{
  return new LString(*this);
}



/********************   LInt    ********************/
LInt::LInt()
{

}

LInt::LInt(const LInt & other)
{

}

LInt &LInt::operator=(const LInt & other)
{
  LInt tmp(other);
  swap(tmp);
  return *this;
}

void LInt::swap(LInt & other)
{

}

LInt::~LInt()
{

}

void LInt::accept(Visitor *v)
{
  v->visitLInt(this);
}

LInt *LInt::clone() const
{
  return new LInt(*this);
}



/********************   EAtom    ********************/
EAtom::EAtom(Lit *p1)
{
  lit_ = p1;

}

EAtom::EAtom(const EAtom & other)
{
  lit_ = other.lit_->clone();

}

EAtom &EAtom::operator=(const EAtom & other)
{
  EAtom tmp(other);
  swap(tmp);
  return *this;
}

void EAtom::swap(EAtom & other)
{
  std::swap(lit_, other.lit_);

}

EAtom::~EAtom()
{
  delete(lit_);

}

void EAtom::accept(Visitor *v)
{
  v->visitEAtom(this);
}

EAtom *EAtom::clone() const
{
  return new EAtom(*this);
}



/********************   EInde    ********************/
EInde::EInde(Exp *p1, Id p2)
{
  exp_ = p1;
  id_ = p2;

}

EInde::EInde(const EInde & other)
{
  exp_ = other.exp_->clone();
  id_ = other.id_;

}

EInde &EInde::operator=(const EInde & other)
{
  EInde tmp(other);
  swap(tmp);
  return *this;
}

void EInde::swap(EInde & other)
{
  std::swap(exp_, other.exp_);
  std::swap(id_, other.id_);

}

EInde::~EInde()
{
  delete(exp_);

}

void EInde::accept(Visitor *v)
{
  v->visitEInde(this);
}

EInde *EInde::clone() const
{
  return new EInde(*this);
}



/********************   EQCon    ********************/
EQCon::EQCon(Exp *p1, Id p2)
{
  exp_ = p1;
  id_ = p2;

}

EQCon::EQCon(const EQCon & other)
{
  exp_ = other.exp_->clone();
  id_ = other.id_;

}

EQCon &EQCon::operator=(const EQCon & other)
{
  EQCon tmp(other);
  swap(tmp);
  return *this;
}

void EQCon::swap(EQCon & other)
{
  std::swap(exp_, other.exp_);
  std::swap(id_, other.id_);

}

EQCon::~EQCon()
{
  delete(exp_);

}

void EQCon::accept(Visitor *v)
{
  v->visitEQCon(this);
}

EQCon *EQCon::clone() const
{
  return new EQCon(*this);
}



/********************   EFunC    ********************/
EFunC::EFunC(Exp *p1, ListExp *p2)
{
  exp_ = p1;
  listexp_ = p2;

}

EFunC::EFunC(const EFunC & other)
{
  exp_ = other.exp_->clone();
  listexp_ = other.listexp_->clone();

}

EFunC &EFunC::operator=(const EFunC & other)
{
  EFunC tmp(other);
  swap(tmp);
  return *this;
}

void EFunC::swap(EFunC & other)
{
  std::swap(exp_, other.exp_);
  std::swap(listexp_, other.listexp_);

}

EFunC::~EFunC()
{
  delete(exp_);
  delete(listexp_);

}

void EFunC::accept(Visitor *v)
{
  v->visitEFunC(this);
}

EFunC *EFunC::clone() const
{
  return new EFunC(*this);
}



/********************   EStPP    ********************/
EStPP::EStPP(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

EStPP::EStPP(const EStPP & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

EStPP &EStPP::operator=(const EStPP & other)
{
  EStPP tmp(other);
  swap(tmp);
  return *this;
}

void EStPP::swap(EStPP & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

EStPP::~EStPP()
{
  delete(exp_1);
  delete(exp_2);

}

void EStPP::accept(Visitor *v)
{
  v->visitEStPP(this);
}

EStPP *EStPP::clone() const
{
  return new EStPP(*this);
}



/********************   EStPA    ********************/
EStPA::EStPA(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

EStPA::EStPA(const EStPA & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

EStPA &EStPA::operator=(const EStPA & other)
{
  EStPA tmp(other);
  swap(tmp);
  return *this;
}

void EStPA::swap(EStPA & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

EStPA::~EStPA()
{
  delete(exp_1);
  delete(exp_2);

}

void EStPA::accept(Visitor *v)
{
  v->visitEStPA(this);
}

EStPA *EStPA::clone() const
{
  return new EStPA(*this);
}



/********************   EInEP    ********************/
EInEP::EInEP(Exp *p1)
{
  exp_ = p1;

}

EInEP::EInEP(const EInEP & other)
{
  exp_ = other.exp_->clone();

}

EInEP &EInEP::operator=(const EInEP & other)
{
  EInEP tmp(other);
  swap(tmp);
  return *this;
}

void EInEP::swap(EInEP & other)
{
  std::swap(exp_, other.exp_);

}

EInEP::~EInEP()
{
  delete(exp_);

}

void EInEP::accept(Visitor *v)
{
  v->visitEInEP(this);
}

EInEP *EInEP::clone() const
{
  return new EInEP(*this);
}



/********************   EDeEM    ********************/
EDeEM::EDeEM(Exp *p1)
{
  exp_ = p1;

}

EDeEM::EDeEM(const EDeEM & other)
{
  exp_ = other.exp_->clone();

}

EDeEM &EDeEM::operator=(const EDeEM & other)
{
  EDeEM tmp(other);
  swap(tmp);
  return *this;
}

void EDeEM::swap(EDeEM & other)
{
  std::swap(exp_, other.exp_);

}

EDeEM::~EDeEM()
{
  delete(exp_);

}

void EDeEM::accept(Visitor *v)
{
  v->visitEDeEM(this);
}

EDeEM *EDeEM::clone() const
{
  return new EDeEM(*this);
}



/********************   EDere    ********************/
EDere::EDere(Exp *p1)
{
  exp_ = p1;

}

EDere::EDere(const EDere & other)
{
  exp_ = other.exp_->clone();

}

EDere &EDere::operator=(const EDere & other)
{
  EDere tmp(other);
  swap(tmp);
  return *this;
}

void EDere::swap(EDere & other)
{
  std::swap(exp_, other.exp_);

}

EDere::~EDere()
{
  delete(exp_);

}

void EDere::accept(Visitor *v)
{
  v->visitEDere(this);
}

EDere *EDere::clone() const
{
  return new EDere(*this);
}



/********************   EInPE    ********************/
EInPE::EInPE(Exp *p1)
{
  exp_ = p1;

}

EInPE::EInPE(const EInPE & other)
{
  exp_ = other.exp_->clone();

}

EInPE &EInPE::operator=(const EInPE & other)
{
  EInPE tmp(other);
  swap(tmp);
  return *this;
}

void EInPE::swap(EInPE & other)
{
  std::swap(exp_, other.exp_);

}

EInPE::~EInPE()
{
  delete(exp_);

}

void EInPE::accept(Visitor *v)
{
  v->visitEInPE(this);
}

EInPE *EInPE::clone() const
{
  return new EInPE(*this);
}



/********************   EDeME    ********************/
EDeME::EDeME(Exp *p1)
{
  exp_ = p1;

}

EDeME::EDeME(const EDeME & other)
{
  exp_ = other.exp_->clone();

}

EDeME &EDeME::operator=(const EDeME & other)
{
  EDeME tmp(other);
  swap(tmp);
  return *this;
}

void EDeME::swap(EDeME & other)
{
  std::swap(exp_, other.exp_);

}

EDeME::~EDeME()
{
  delete(exp_);

}

void EDeME::accept(Visitor *v)
{
  v->visitEDeME(this);
}

EDeME *EDeME::clone() const
{
  return new EDeME(*this);
}



/********************   ENega    ********************/
ENega::ENega(Exp *p1)
{
  exp_ = p1;

}

ENega::ENega(const ENega & other)
{
  exp_ = other.exp_->clone();

}

ENega &ENega::operator=(const ENega & other)
{
  ENega tmp(other);
  swap(tmp);
  return *this;
}

void ENega::swap(ENega & other)
{
  std::swap(exp_, other.exp_);

}

ENega::~ENega()
{
  delete(exp_);

}

void ENega::accept(Visitor *v)
{
  v->visitENega(this);
}

ENega *ENega::clone() const
{
  return new ENega(*this);
}



/********************   EMult    ********************/
EMult::EMult(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

EMult::EMult(const EMult & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

EMult &EMult::operator=(const EMult & other)
{
  EMult tmp(other);
  swap(tmp);
  return *this;
}

void EMult::swap(EMult & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

EMult::~EMult()
{
  delete(exp_1);
  delete(exp_2);

}

void EMult::accept(Visitor *v)
{
  v->visitEMult(this);
}

EMult *EMult::clone() const
{
  return new EMult(*this);
}



/********************   EDivi    ********************/
EDivi::EDivi(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

EDivi::EDivi(const EDivi & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

EDivi &EDivi::operator=(const EDivi & other)
{
  EDivi tmp(other);
  swap(tmp);
  return *this;
}

void EDivi::swap(EDivi & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

EDivi::~EDivi()
{
  delete(exp_1);
  delete(exp_2);

}

void EDivi::accept(Visitor *v)
{
  v->visitEDivi(this);
}

EDivi *EDivi::clone() const
{
  return new EDivi(*this);
}



/********************   ERema    ********************/
ERema::ERema(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

ERema::ERema(const ERema & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

ERema &ERema::operator=(const ERema & other)
{
  ERema tmp(other);
  swap(tmp);
  return *this;
}

void ERema::swap(ERema & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

ERema::~ERema()
{
  delete(exp_1);
  delete(exp_2);

}

void ERema::accept(Visitor *v)
{
  v->visitERema(this);
}

ERema *ERema::clone() const
{
  return new ERema(*this);
}



/********************   EAddi    ********************/
EAddi::EAddi(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

EAddi::EAddi(const EAddi & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

EAddi &EAddi::operator=(const EAddi & other)
{
  EAddi tmp(other);
  swap(tmp);
  return *this;
}

void EAddi::swap(EAddi & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

EAddi::~EAddi()
{
  delete(exp_1);
  delete(exp_2);

}

void EAddi::accept(Visitor *v)
{
  v->visitEAddi(this);
}

EAddi *EAddi::clone() const
{
  return new EAddi(*this);
}



/********************   ESubt    ********************/
ESubt::ESubt(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

ESubt::ESubt(const ESubt & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

ESubt &ESubt::operator=(const ESubt & other)
{
  ESubt tmp(other);
  swap(tmp);
  return *this;
}

void ESubt::swap(ESubt & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

ESubt::~ESubt()
{
  delete(exp_1);
  delete(exp_2);

}

void ESubt::accept(Visitor *v)
{
  v->visitESubt(this);
}

ESubt *ESubt::clone() const
{
  return new ESubt(*this);
}



/********************   ELShi    ********************/
ELShi::ELShi(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

ELShi::ELShi(const ELShi & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

ELShi &ELShi::operator=(const ELShi & other)
{
  ELShi tmp(other);
  swap(tmp);
  return *this;
}

void ELShi::swap(ELShi & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

ELShi::~ELShi()
{
  delete(exp_1);
  delete(exp_2);

}

void ELShi::accept(Visitor *v)
{
  v->visitELShi(this);
}

ELShi *ELShi::clone() const
{
  return new ELShi(*this);
}



/********************   ERShi    ********************/
ERShi::ERShi(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

ERShi::ERShi(const ERShi & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

ERShi &ERShi::operator=(const ERShi & other)
{
  ERShi tmp(other);
  swap(tmp);
  return *this;
}

void ERShi::swap(ERShi & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

ERShi::~ERShi()
{
  delete(exp_1);
  delete(exp_2);

}

void ERShi::accept(Visitor *v)
{
  v->visitERShi(this);
}

ERShi *ERShi::clone() const
{
  return new ERShi(*this);
}



/********************   ECoSm    ********************/
ECoSm::ECoSm(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

ECoSm::ECoSm(const ECoSm & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

ECoSm &ECoSm::operator=(const ECoSm & other)
{
  ECoSm tmp(other);
  swap(tmp);
  return *this;
}

void ECoSm::swap(ECoSm & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

ECoSm::~ECoSm()
{
  delete(exp_1);
  delete(exp_2);

}

void ECoSm::accept(Visitor *v)
{
  v->visitECoSm(this);
}

ECoSm *ECoSm::clone() const
{
  return new ECoSm(*this);
}



/********************   ECoGr    ********************/
ECoGr::ECoGr(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

ECoGr::ECoGr(const ECoGr & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

ECoGr &ECoGr::operator=(const ECoGr & other)
{
  ECoGr tmp(other);
  swap(tmp);
  return *this;
}

void ECoGr::swap(ECoGr & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

ECoGr::~ECoGr()
{
  delete(exp_1);
  delete(exp_2);

}

void ECoGr::accept(Visitor *v)
{
  v->visitECoGr(this);
}

ECoGr *ECoGr::clone() const
{
  return new ECoGr(*this);
}



/********************   ECoSE    ********************/
ECoSE::ECoSE(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

ECoSE::ECoSE(const ECoSE & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

ECoSE &ECoSE::operator=(const ECoSE & other)
{
  ECoSE tmp(other);
  swap(tmp);
  return *this;
}

void ECoSE::swap(ECoSE & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

ECoSE::~ECoSE()
{
  delete(exp_1);
  delete(exp_2);

}

void ECoSE::accept(Visitor *v)
{
  v->visitECoSE(this);
}

ECoSE *ECoSE::clone() const
{
  return new ECoSE(*this);
}



/********************   ECoGE    ********************/
ECoGE::ECoGE(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

ECoGE::ECoGE(const ECoGE & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

ECoGE &ECoGE::operator=(const ECoGE & other)
{
  ECoGE tmp(other);
  swap(tmp);
  return *this;
}

void ECoGE::swap(ECoGE & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

ECoGE::~ECoGE()
{
  delete(exp_1);
  delete(exp_2);

}

void ECoGE::accept(Visitor *v)
{
  v->visitECoGE(this);
}

ECoGE *ECoGE::clone() const
{
  return new ECoGE(*this);
}



/********************   EInEq    ********************/
EInEq::EInEq(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

EInEq::EInEq(const EInEq & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

EInEq &EInEq::operator=(const EInEq & other)
{
  EInEq tmp(other);
  swap(tmp);
  return *this;
}

void EInEq::swap(EInEq & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

EInEq::~EInEq()
{
  delete(exp_1);
  delete(exp_2);

}

void EInEq::accept(Visitor *v)
{
  v->visitEInEq(this);
}

EInEq *EInEq::clone() const
{
  return new EInEq(*this);
}



/********************   EEqua    ********************/
EEqua::EEqua(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

EEqua::EEqua(const EEqua & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

EEqua &EEqua::operator=(const EEqua & other)
{
  EEqua tmp(other);
  swap(tmp);
  return *this;
}

void EEqua::swap(EEqua & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

EEqua::~EEqua()
{
  delete(exp_1);
  delete(exp_2);

}

void EEqua::accept(Visitor *v)
{
  v->visitEEqua(this);
}

EEqua *EEqua::clone() const
{
  return new EEqua(*this);
}



/********************   EConj    ********************/
EConj::EConj(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

EConj::EConj(const EConj & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

EConj &EConj::operator=(const EConj & other)
{
  EConj tmp(other);
  swap(tmp);
  return *this;
}

void EConj::swap(EConj & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

EConj::~EConj()
{
  delete(exp_1);
  delete(exp_2);

}

void EConj::accept(Visitor *v)
{
  v->visitEConj(this);
}

EConj *EConj::clone() const
{
  return new EConj(*this);
}



/********************   EDisj    ********************/
EDisj::EDisj(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

EDisj::EDisj(const EDisj & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

EDisj &EDisj::operator=(const EDisj & other)
{
  EDisj tmp(other);
  swap(tmp);
  return *this;
}

void EDisj::swap(EDisj & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

EDisj::~EDisj()
{
  delete(exp_1);
  delete(exp_2);

}

void EDisj::accept(Visitor *v)
{
  v->visitEDisj(this);
}

EDisj *EDisj::clone() const
{
  return new EDisj(*this);
}



/********************   EAssi    ********************/
EAssi::EAssi(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

EAssi::EAssi(const EAssi & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

EAssi &EAssi::operator=(const EAssi & other)
{
  EAssi tmp(other);
  swap(tmp);
  return *this;
}

void EAssi::swap(EAssi & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

EAssi::~EAssi()
{
  delete(exp_1);
  delete(exp_2);

}

void EAssi::accept(Visitor *v)
{
  v->visitEAssi(this);
}

EAssi *EAssi::clone() const
{
  return new EAssi(*this);
}



/********************   EAsPl    ********************/
EAsPl::EAsPl(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

EAsPl::EAsPl(const EAsPl & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

EAsPl &EAsPl::operator=(const EAsPl & other)
{
  EAsPl tmp(other);
  swap(tmp);
  return *this;
}

void EAsPl::swap(EAsPl & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

EAsPl::~EAsPl()
{
  delete(exp_1);
  delete(exp_2);

}

void EAsPl::accept(Visitor *v)
{
  v->visitEAsPl(this);
}

EAsPl *EAsPl::clone() const
{
  return new EAsPl(*this);
}



/********************   EAsMi    ********************/
EAsMi::EAsMi(Exp *p1, Exp *p2)
{
  exp_1 = p1;
  exp_2 = p2;

}

EAsMi::EAsMi(const EAsMi & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();

}

EAsMi &EAsMi::operator=(const EAsMi & other)
{
  EAsMi tmp(other);
  swap(tmp);
  return *this;
}

void EAsMi::swap(EAsMi & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);

}

EAsMi::~EAsMi()
{
  delete(exp_1);
  delete(exp_2);

}

void EAsMi::accept(Visitor *v)
{
  v->visitEAsMi(this);
}

EAsMi *EAsMi::clone() const
{
  return new EAsMi(*this);
}



/********************   ECond    ********************/
ECond::ECond(Exp *p1, Exp *p2, Exp *p3)
{
  exp_1 = p1;
  exp_2 = p2;
  exp_3 = p3;

}

ECond::ECond(const ECond & other)
{
  exp_1 = other.exp_1->clone();
  exp_2 = other.exp_2->clone();
  exp_3 = other.exp_3->clone();

}

ECond &ECond::operator=(const ECond & other)
{
  ECond tmp(other);
  swap(tmp);
  return *this;
}

void ECond::swap(ECond & other)
{
  std::swap(exp_1, other.exp_1);
  std::swap(exp_2, other.exp_2);
  std::swap(exp_3, other.exp_3);

}

ECond::~ECond()
{
  delete(exp_1);
  delete(exp_2);
  delete(exp_3);

}

void ECond::accept(Visitor *v)
{
  v->visitECond(this);
}

ECond *ECond::clone() const
{
  return new ECond(*this);
}



/********************   EExce    ********************/
EExce::EExce(Exp *p1)
{
  exp_ = p1;

}

EExce::EExce(const EExce & other)
{
  exp_ = other.exp_->clone();

}

EExce &EExce::operator=(const EExce & other)
{
  EExce tmp(other);
  swap(tmp);
  return *this;
}

void EExce::swap(EExce & other)
{
  std::swap(exp_, other.exp_);

}

EExce::~EExce()
{
  delete(exp_);

}

void EExce::accept(Visitor *v)
{
  v->visitEExce(this);
}

EExce *EExce::clone() const
{
  return new EExce(*this);
}




/********************   ListArg    ********************/

void ListArg::accept(Visitor *v)
{
  v->visitListArg(this);
}


ListArg *ListArg::clone() const
{
  return new ListArg(*this);
}


/********************   ListStm    ********************/

void ListStm::accept(Visitor *v)
{
  v->visitListStm(this);
}


ListStm *ListStm::clone() const
{
  return new ListStm(*this);
}


/********************   ListId    ********************/

void ListId::accept(Visitor *v)
{
  v->visitListId(this);
}


ListId *ListId::clone() const
{
  return new ListId(*this);
}


/********************   ListType    ********************/

void ListType::accept(Visitor *v)
{
  v->visitListType(this);
}


ListType *ListType::clone() const
{
  return new ListType(*this);
}


/********************   ListExp    ********************/

void ListExp::accept(Visitor *v)
{
  v->visitListExp(this);
}


ListExp *ListExp::clone() const
{
  return new ListExp(*this);
}




