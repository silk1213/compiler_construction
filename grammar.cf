Func . Def ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
separator Arg "," ;
terminator Stm "" ;

SDecl . Stm ::= Type Id ";" ;
SDecls . Stm ::= Type Id "," [Id] ";" ;
separator Id "," ;
SInit . Stm ::= Type Id "=" Exp ";" ;

SReturn . Stm ::= "return" Exp ";" ;
SWhile . Stm ::= "while" "(" Exp ")" Stm ";" ;
SDo . Stm ::= "do" Stm ";" "while" "(" Exp ")" ";" ;
SFor . Stm ::= "for" "(" Type Id "=" Exp ";" Exp ";" Stm ")" Stm ";" ;
SIf . Stm ::= "if" "(" Exp ")" Stm ";" ;
SIfElse . Stm ::= "if" "(" Exp ")" Stm ";" "else" Stm ";" ;
SBlock . Stm ::= "{" [Stm] "}" ;
STypedef . Stm ::= "typedef" Type "<" Type ">" Id ";" ;
SStruct. Stm ::= "struct" Id "{" [Stm] "}" ";" ;

Defi . Stm ::= Exp ";" ;

??EAtom . Exp16 ::= Exp ;
EInde . Exp15 ::= Exp "[" Id "]" ;
EQCon . Exp15 ::= Exp "::" Id ;
EFunC . Exp15 ::= Exp "(" [Exp] ")" ;
separator Exp "," ;
EStrE . Exp14 ::= Exp "." Exp ;
EStrE . Exp14 ::= Exp "->" Exp ;
EIncr . Exp14 ::= Exp "++" ;
EDecr . Exp14 ::= Exp "--" ;
EDere . Exp14 ::= "*" Exp ;
EIncr . Exp13 ::= "++" Exp ;
EDecr . Exp13 ::= "--" Exp ;
ENega . Exp13 ::= "!" Exp ;
EMult . Exp12 ::= Exp "*" Exp ;
EDivi . Exp12 ::= Exp "/" Exp ;
ERema . Exp12 ::= Exp "%" Exp ;
EAddi . Exp11 ::= Exp "+" Exp ;
ESubt . Exp11 ::= Exp "-" Exp ;
ELShi . Exp10 ::= Exp "<<" Exp ;
ERShi . Exp10 ::= Exp ">>" Exp ;
EComp . Exp9 ::= Exp "<" Exp ;
EComp . Exp9 ::= Exp ">" Exp ;
EComp . Exp9 ::= Exp "<=" Exp ;
EComp . Exp9 ::= Exp ">=" Exp ;
EInEq . Exp8 ::= Exp "!=" Exp ;
EEqua . Exp8 ::= Exp "==" Exp ;
EConj . Exp4 ::= Exp "&&" Exp ;
EDisj . Exp3 ::= Exp "||" Exp ;
EAssi . Exp2 ::= Exp "=" Exp ;
EAssi . Exp2 ::= Exp "+=" Exp ;
EAssi . Exp2 ::= Exp "-=" Exp ;
ECond . Exp2 ::= Exp "?" Exp ":" Exp ;
EExce . Exp1 ::= "throw" Exp ;

TInt . Type ::= "int" ;
Tbool . Type ::= "bool" ;
Tdouble . Type ::= "double" ;
Tvoid . Type ::= "void" ;

comment "//" ;
comment "#" ;
comment "/*" "*/" ;

coercions Exp 16;
